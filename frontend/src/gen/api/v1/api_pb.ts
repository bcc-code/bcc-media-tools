// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file api/v1/api.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum api.v1.BmmEnvironment
 */
export enum BmmEnvironment {
  /**
   * @generated from enum value: Production = 0;
   */
  Production = 0,

  /**
   * @generated from enum value: Integration = 1;
   */
  Integration = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(BmmEnvironment)
proto3.util.setEnumType(BmmEnvironment, "api.v1.BmmEnvironment", [
  { no: 0, name: "Production" },
  { no: 1, name: "Integration" },
]);

/**
 * @generated from message api.v1.BMMPermission
 */
export class BMMPermission extends Message<BMMPermission> {
  /**
   * @generated from field: repeated string languages = 1;
   */
  languages: string[] = [];

  /**
   * @generated from field: repeated string albums = 2;
   */
  albums: string[] = [];

  /**
   * @generated from field: repeated string podcasts = 3;
   */
  podcasts: string[] = [];

  /**
   * @generated from field: bool admin = 4;
   */
  admin = false;

  /**
   * @generated from field: bool integration = 5;
   */
  integration = false;

  constructor(data?: PartialMessage<BMMPermission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.BMMPermission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "languages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "albums", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "podcasts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "integration", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BMMPermission {
    return new BMMPermission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BMMPermission {
    return new BMMPermission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BMMPermission {
    return new BMMPermission().fromJsonString(jsonString, options);
  }

  static equals(a: BMMPermission | PlainMessage<BMMPermission> | undefined, b: BMMPermission | PlainMessage<BMMPermission> | undefined): boolean {
    return proto3.util.equals(BMMPermission, a, b);
  }
}

/**
 * @generated from message api.v1.TranscriptionPermission
 */
export class TranscriptionPermission extends Message<TranscriptionPermission> {
  /**
   * @generated from field: bool admin = 1;
   */
  admin = false;

  /**
   * @generated from field: bool mediabanken = 2;
   */
  mediabanken = false;

  constructor(data?: PartialMessage<TranscriptionPermission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TranscriptionPermission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "mediabanken", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TranscriptionPermission {
    return new TranscriptionPermission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TranscriptionPermission {
    return new TranscriptionPermission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TranscriptionPermission {
    return new TranscriptionPermission().fromJsonString(jsonString, options);
  }

  static equals(a: TranscriptionPermission | PlainMessage<TranscriptionPermission> | undefined, b: TranscriptionPermission | PlainMessage<TranscriptionPermission> | undefined): boolean {
    return proto3.util.equals(TranscriptionPermission, a, b);
  }
}

/**
 * @generated from message api.v1.Permissions
 */
export class Permissions extends Message<Permissions> {
  /**
   * @generated from field: bool admin = 1;
   */
  admin = false;

  /**
   * @generated from field: api.v1.BMMPermission bmm = 2;
   */
  bmm?: BMMPermission;

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: api.v1.TranscriptionPermission transcription = 4;
   */
  transcription?: TranscriptionPermission;

  constructor(data?: PartialMessage<Permissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Permissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "bmm", kind: "message", T: BMMPermission },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "transcription", kind: "message", T: TranscriptionPermission },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Permissions {
    return new Permissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Permissions {
    return new Permissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Permissions {
    return new Permissions().fromJsonString(jsonString, options);
  }

  static equals(a: Permissions | PlainMessage<Permissions> | undefined, b: Permissions | PlainMessage<Permissions> | undefined): boolean {
    return proto3.util.equals(Permissions, a, b);
  }
}

/**
 * @generated from message api.v1.GetPermissionsRequest
 */
export class GetPermissionsRequest extends Message<GetPermissionsRequest> {
  constructor(data?: PartialMessage<GetPermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetPermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPermissionsRequest {
    return new GetPermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPermissionsRequest {
    return new GetPermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPermissionsRequest {
    return new GetPermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPermissionsRequest | PlainMessage<GetPermissionsRequest> | undefined, b: GetPermissionsRequest | PlainMessage<GetPermissionsRequest> | undefined): boolean {
    return proto3.util.equals(GetPermissionsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.SetPermissionsRequest
 */
export class SetPermissionsRequest extends Message<SetPermissionsRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: api.v1.Permissions permissions = 2;
   */
  permissions?: Permissions;

  constructor(data?: PartialMessage<SetPermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.SetPermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permissions", kind: "message", T: Permissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPermissionsRequest {
    return new SetPermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPermissionsRequest {
    return new SetPermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPermissionsRequest {
    return new SetPermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetPermissionsRequest | PlainMessage<SetPermissionsRequest> | undefined, b: SetPermissionsRequest | PlainMessage<SetPermissionsRequest> | undefined): boolean {
    return proto3.util.equals(SetPermissionsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.DeletePermissionsRequest
 */
export class DeletePermissionsRequest extends Message<DeletePermissionsRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<DeletePermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DeletePermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePermissionsRequest {
    return new DeletePermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePermissionsRequest {
    return new DeletePermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePermissionsRequest {
    return new DeletePermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePermissionsRequest | PlainMessage<DeletePermissionsRequest> | undefined, b: DeletePermissionsRequest | PlainMessage<DeletePermissionsRequest> | undefined): boolean {
    return proto3.util.equals(DeletePermissionsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.PermissionsList
 */
export class PermissionsList extends Message<PermissionsList> {
  /**
   * @generated from field: map<string, api.v1.Permissions> permissions = 1;
   */
  permissions: { [key: string]: Permissions } = {};

  constructor(data?: PartialMessage<PermissionsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PermissionsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permissions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Permissions} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermissionsList {
    return new PermissionsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermissionsList {
    return new PermissionsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermissionsList {
    return new PermissionsList().fromJsonString(jsonString, options);
  }

  static equals(a: PermissionsList | PlainMessage<PermissionsList> | undefined, b: PermissionsList | PlainMessage<PermissionsList> | undefined): boolean {
    return proto3.util.equals(PermissionsList, a, b);
  }
}

/**
 * @generated from message api.v1.BMMYear
 */
export class BMMYear extends Message<BMMYear> {
  /**
   * @generated from field: uint32 year = 1;
   */
  year = 0;

  /**
   * @generated from field: uint32 count = 2;
   */
  count = 0;

  constructor(data?: PartialMessage<BMMYear>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.BMMYear";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "year", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BMMYear {
    return new BMMYear().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BMMYear {
    return new BMMYear().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BMMYear {
    return new BMMYear().fromJsonString(jsonString, options);
  }

  static equals(a: BMMYear | PlainMessage<BMMYear> | undefined, b: BMMYear | PlainMessage<BMMYear> | undefined): boolean {
    return proto3.util.equals(BMMYear, a, b);
  }
}

/**
 * @generated from message api.v1.GetYearsResponse
 */
export class GetYearsResponse extends Message<GetYearsResponse> {
  /**
   * @generated from field: map<uint32, api.v1.BMMYear> data = 1;
   */
  data: { [key: number]: BMMYear } = {};

  constructor(data?: PartialMessage<GetYearsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetYearsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "message", T: BMMYear} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetYearsResponse {
    return new GetYearsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetYearsResponse {
    return new GetYearsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetYearsResponse {
    return new GetYearsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetYearsResponse | PlainMessage<GetYearsResponse> | undefined, b: GetYearsResponse | PlainMessage<GetYearsResponse> | undefined): boolean {
    return proto3.util.equals(GetYearsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetYearsRequest
 */
export class GetYearsRequest extends Message<GetYearsRequest> {
  /**
   * @generated from field: api.v1.BmmEnvironment environment = 1;
   */
  environment = BmmEnvironment.Production;

  constructor(data?: PartialMessage<GetYearsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetYearsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment", kind: "enum", T: proto3.getEnumType(BmmEnvironment) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetYearsRequest {
    return new GetYearsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetYearsRequest {
    return new GetYearsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetYearsRequest {
    return new GetYearsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetYearsRequest | PlainMessage<GetYearsRequest> | undefined, b: GetYearsRequest | PlainMessage<GetYearsRequest> | undefined): boolean {
    return proto3.util.equals(GetYearsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetAlbumsRequest
 */
export class GetAlbumsRequest extends Message<GetAlbumsRequest> {
  /**
   * @generated from field: uint32 year = 1;
   */
  year = 0;

  /**
   * @generated from field: api.v1.BmmEnvironment environment = 2;
   */
  environment = BmmEnvironment.Production;

  constructor(data?: PartialMessage<GetAlbumsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetAlbumsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "year", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "environment", kind: "enum", T: proto3.getEnumType(BmmEnvironment) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlbumsRequest {
    return new GetAlbumsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlbumsRequest {
    return new GetAlbumsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlbumsRequest {
    return new GetAlbumsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlbumsRequest | PlainMessage<GetAlbumsRequest> | undefined, b: GetAlbumsRequest | PlainMessage<GetAlbumsRequest> | undefined): boolean {
    return proto3.util.equals(GetAlbumsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.Album
 */
export class Album extends Message<Album> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string cover = 4;
   */
  cover = "";

  /**
   * @generated from field: repeated string languages = 5;
   */
  languages: string[] = [];

  constructor(data?: PartialMessage<Album>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Album";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "cover", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "languages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Album {
    return new Album().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Album {
    return new Album().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Album {
    return new Album().fromJsonString(jsonString, options);
  }

  static equals(a: Album | PlainMessage<Album> | undefined, b: Album | PlainMessage<Album> | undefined): boolean {
    return proto3.util.equals(Album, a, b);
  }
}

/**
 * @generated from message api.v1.AlbumsList
 */
export class AlbumsList extends Message<AlbumsList> {
  /**
   * @generated from field: repeated api.v1.Album albums = 1;
   */
  albums: Album[] = [];

  constructor(data?: PartialMessage<AlbumsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.AlbumsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "albums", kind: "message", T: Album, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlbumsList {
    return new AlbumsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlbumsList {
    return new AlbumsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlbumsList {
    return new AlbumsList().fromJsonString(jsonString, options);
  }

  static equals(a: AlbumsList | PlainMessage<AlbumsList> | undefined, b: AlbumsList | PlainMessage<AlbumsList> | undefined): boolean {
    return proto3.util.equals(AlbumsList, a, b);
  }
}

/**
 * @generated from message api.v1.GetAlbumTracksRequest
 */
export class GetAlbumTracksRequest extends Message<GetAlbumTracksRequest> {
  /**
   * @generated from field: string album_id = 1;
   */
  albumId = "";

  /**
   * @generated from field: api.v1.BmmEnvironment environment = 2;
   */
  environment = BmmEnvironment.Production;

  constructor(data?: PartialMessage<GetAlbumTracksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetAlbumTracksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "album_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment", kind: "enum", T: proto3.getEnumType(BmmEnvironment) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlbumTracksRequest {
    return new GetAlbumTracksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlbumTracksRequest {
    return new GetAlbumTracksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlbumTracksRequest {
    return new GetAlbumTracksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlbumTracksRequest | PlainMessage<GetAlbumTracksRequest> | undefined, b: GetAlbumTracksRequest | PlainMessage<GetAlbumTracksRequest> | undefined): boolean {
    return proto3.util.equals(GetAlbumTracksRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetPodcastTracksRequest
 */
export class GetPodcastTracksRequest extends Message<GetPodcastTracksRequest> {
  /**
   * @generated from field: string podcast_tag = 1;
   */
  podcastTag = "";

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: api.v1.BmmEnvironment environment = 3;
   */
  environment = BmmEnvironment.Production;

  constructor(data?: PartialMessage<GetPodcastTracksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetPodcastTracksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "podcast_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "environment", kind: "enum", T: proto3.getEnumType(BmmEnvironment) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPodcastTracksRequest {
    return new GetPodcastTracksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPodcastTracksRequest {
    return new GetPodcastTracksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPodcastTracksRequest {
    return new GetPodcastTracksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPodcastTracksRequest | PlainMessage<GetPodcastTracksRequest> | undefined, b: GetPodcastTracksRequest | PlainMessage<GetPodcastTracksRequest> | undefined): boolean {
    return proto3.util.equals(GetPodcastTracksRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetAvailableLanguagesRequest
 */
export class GetAvailableLanguagesRequest extends Message<GetAvailableLanguagesRequest> {
  /**
   * @generated from field: api.v1.BmmEnvironment environment = 1;
   */
  environment = BmmEnvironment.Production;

  constructor(data?: PartialMessage<GetAvailableLanguagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetAvailableLanguagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment", kind: "enum", T: proto3.getEnumType(BmmEnvironment) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAvailableLanguagesRequest {
    return new GetAvailableLanguagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAvailableLanguagesRequest {
    return new GetAvailableLanguagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAvailableLanguagesRequest {
    return new GetAvailableLanguagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAvailableLanguagesRequest | PlainMessage<GetAvailableLanguagesRequest> | undefined, b: GetAvailableLanguagesRequest | PlainMessage<GetAvailableLanguagesRequest> | undefined): boolean {
    return proto3.util.equals(GetAvailableLanguagesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.BMMTrack
 */
export class BMMTrack extends Message<BMMTrack> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: google.protobuf.Timestamp publishedAt = 3;
   */
  publishedAt?: Timestamp;

  /**
   * @generated from field: api.v1.LanguageList languages = 4;
   */
  languages?: LanguageList;

  /**
   * @generated from field: api.v1.LanguageList transcriptions = 5;
   */
  transcriptions?: LanguageList;

  /**
   * @generated from field: bool hasTranscriptions = 6;
   */
  hasTranscriptions = false;

  constructor(data?: PartialMessage<BMMTrack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.BMMTrack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "publishedAt", kind: "message", T: Timestamp },
    { no: 4, name: "languages", kind: "message", T: LanguageList },
    { no: 5, name: "transcriptions", kind: "message", T: LanguageList },
    { no: 6, name: "hasTranscriptions", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BMMTrack {
    return new BMMTrack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BMMTrack {
    return new BMMTrack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BMMTrack {
    return new BMMTrack().fromJsonString(jsonString, options);
  }

  static equals(a: BMMTrack | PlainMessage<BMMTrack> | undefined, b: BMMTrack | PlainMessage<BMMTrack> | undefined): boolean {
    return proto3.util.equals(BMMTrack, a, b);
  }
}

/**
 * @generated from message api.v1.TracksList
 */
export class TracksList extends Message<TracksList> {
  /**
   * @generated from field: repeated api.v1.BMMTrack tracks = 1;
   */
  tracks: BMMTrack[] = [];

  constructor(data?: PartialMessage<TracksList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TracksList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tracks", kind: "message", T: BMMTrack, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TracksList {
    return new TracksList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TracksList {
    return new TracksList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TracksList {
    return new TracksList().fromJsonString(jsonString, options);
  }

  static equals(a: TracksList | PlainMessage<TracksList> | undefined, b: TracksList | PlainMessage<TracksList> | undefined): boolean {
    return proto3.util.equals(TracksList, a, b);
  }
}

/**
 * @generated from message api.v1.LanguageList
 */
export class LanguageList extends Message<LanguageList> {
  /**
   * @generated from field: repeated api.v1.Language Languages = 1;
   */
  Languages: Language[] = [];

  constructor(data?: PartialMessage<LanguageList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.LanguageList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Languages", kind: "message", T: Language, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LanguageList {
    return new LanguageList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LanguageList {
    return new LanguageList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LanguageList {
    return new LanguageList().fromJsonString(jsonString, options);
  }

  static equals(a: LanguageList | PlainMessage<LanguageList> | undefined, b: LanguageList | PlainMessage<LanguageList> | undefined): boolean {
    return proto3.util.equals(LanguageList, a, b);
  }
}

/**
 * @generated from message api.v1.Language
 */
export class Language extends Message<Language> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  /**
   * @generated from field: string icon_file = 3;
   */
  iconFile = "";

  constructor(data?: PartialMessage<Language>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Language";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "icon_file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Language {
    return new Language().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Language {
    return new Language().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Language {
    return new Language().fromJsonString(jsonString, options);
  }

  static equals(a: Language | PlainMessage<Language> | undefined, b: Language | PlainMessage<Language> | undefined): boolean {
    return proto3.util.equals(Language, a, b);
  }
}

/**
 * @generated from message api.v1.GetTranscriptionReqest
 */
export class GetTranscriptionReqest extends Message<GetTranscriptionReqest> {
  /**
   * @generated from field: string VXID = 1;
   */
  VXID = "";

  constructor(data?: PartialMessage<GetTranscriptionReqest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetTranscriptionReqest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "VXID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTranscriptionReqest {
    return new GetTranscriptionReqest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTranscriptionReqest {
    return new GetTranscriptionReqest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTranscriptionReqest {
    return new GetTranscriptionReqest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTranscriptionReqest | PlainMessage<GetTranscriptionReqest> | undefined, b: GetTranscriptionReqest | PlainMessage<GetTranscriptionReqest> | undefined): boolean {
    return proto3.util.equals(GetTranscriptionReqest, a, b);
  }
}

/**
 * @generated from message api.v1.Transcription
 */
export class Transcription extends Message<Transcription> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: repeated api.v1.Segments segments = 2;
   */
  segments: Segments[] = [];

  constructor(data?: PartialMessage<Transcription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Transcription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "segments", kind: "message", T: Segments, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transcription {
    return new Transcription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transcription {
    return new Transcription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transcription {
    return new Transcription().fromJsonString(jsonString, options);
  }

  static equals(a: Transcription | PlainMessage<Transcription> | undefined, b: Transcription | PlainMessage<Transcription> | undefined): boolean {
    return proto3.util.equals(Transcription, a, b);
  }
}

/**
 * @generated from message api.v1.Segments
 */
export class Segments extends Message<Segments> {
  /**
   * @generated from field: double id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 seek = 2;
   */
  seek = 0;

  /**
   * @generated from field: double start = 3;
   */
  start = 0;

  /**
   * @generated from field: double end = 4;
   */
  end = 0;

  /**
   * @generated from field: string text = 5;
   */
  text = "";

  /**
   * @generated from field: repeated int32 tokens = 6;
   */
  tokens: number[] = [];

  /**
   * @generated from field: double temperature = 7;
   */
  temperature = 0;

  /**
   * @generated from field: double avg_logprob = 8;
   */
  avgLogprob = 0;

  /**
   * @generated from field: double compression_ratio = 9;
   */
  compressionRatio = 0;

  /**
   * @generated from field: double no_speech_prob = 10;
   */
  noSpeechProb = 0;

  /**
   * @generated from field: double confidence = 11;
   */
  confidence = 0;

  /**
   * @generated from field: repeated api.v1.Words words = 12;
   */
  words: Words[] = [];

  constructor(data?: PartialMessage<Segments>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Segments";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "seek", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "start", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "end", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tokens", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 7, name: "temperature", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "avg_logprob", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "compression_ratio", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 10, name: "no_speech_prob", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 11, name: "confidence", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "words", kind: "message", T: Words, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Segments {
    return new Segments().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Segments {
    return new Segments().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Segments {
    return new Segments().fromJsonString(jsonString, options);
  }

  static equals(a: Segments | PlainMessage<Segments> | undefined, b: Segments | PlainMessage<Segments> | undefined): boolean {
    return proto3.util.equals(Segments, a, b);
  }
}

/**
 * @generated from message api.v1.Words
 */
export class Words extends Message<Words> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: double start = 2;
   */
  start = 0;

  /**
   * @generated from field: double end = 3;
   */
  end = 0;

  /**
   * @generated from field: double confidence = 4;
   */
  confidence = 0;

  constructor(data?: PartialMessage<Words>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Words";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "end", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "confidence", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Words {
    return new Words().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Words {
    return new Words().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Words {
    return new Words().fromJsonString(jsonString, options);
  }

  static equals(a: Words | PlainMessage<Words> | undefined, b: Words | PlainMessage<Words> | undefined): boolean {
    return proto3.util.equals(Words, a, b);
  }
}

/**
 * @generated from message api.v1.GetPreviewRequest
 */
export class GetPreviewRequest extends Message<GetPreviewRequest> {
  /**
   * @generated from field: string VXID = 1;
   */
  VXID = "";

  constructor(data?: PartialMessage<GetPreviewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetPreviewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "VXID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPreviewRequest {
    return new GetPreviewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPreviewRequest {
    return new GetPreviewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPreviewRequest {
    return new GetPreviewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPreviewRequest | PlainMessage<GetPreviewRequest> | undefined, b: GetPreviewRequest | PlainMessage<GetPreviewRequest> | undefined): boolean {
    return proto3.util.equals(GetPreviewRequest, a, b);
  }
}

/**
 * @generated from message api.v1.Preview
 */
export class Preview extends Message<Preview> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<Preview>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Preview";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Preview {
    return new Preview().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Preview {
    return new Preview().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Preview {
    return new Preview().fromJsonString(jsonString, options);
  }

  static equals(a: Preview | PlainMessage<Preview> | undefined, b: Preview | PlainMessage<Preview> | undefined): boolean {
    return proto3.util.equals(Preview, a, b);
  }
}

/**
 * @generated from message api.v1.GetBMMTranscriptionRequest
 */
export class GetBMMTranscriptionRequest extends Message<GetBMMTranscriptionRequest> {
  /**
   * @generated from field: string bmm_id = 1;
   */
  bmmId = "";

  /**
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: api.v1.BmmEnvironment environment = 3;
   */
  environment = BmmEnvironment.Production;

  constructor(data?: PartialMessage<GetBMMTranscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetBMMTranscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bmm_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment", kind: "enum", T: proto3.getEnumType(BmmEnvironment) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBMMTranscriptionRequest {
    return new GetBMMTranscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBMMTranscriptionRequest {
    return new GetBMMTranscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBMMTranscriptionRequest {
    return new GetBMMTranscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBMMTranscriptionRequest | PlainMessage<GetBMMTranscriptionRequest> | undefined, b: GetBMMTranscriptionRequest | PlainMessage<GetBMMTranscriptionRequest> | undefined): boolean {
    return proto3.util.equals(GetBMMTranscriptionRequest, a, b);
  }
}

/**
 * @generated from message api.v1.SubmitTranscriptionRequest
 */
export class SubmitTranscriptionRequest extends Message<SubmitTranscriptionRequest> {
  /**
   * @generated from field: string VXID = 1;
   */
  VXID = "";

  /**
   * @generated from field: api.v1.Transcription transcription = 2;
   */
  transcription?: Transcription;

  constructor(data?: PartialMessage<SubmitTranscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.SubmitTranscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "VXID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transcription", kind: "message", T: Transcription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitTranscriptionRequest {
    return new SubmitTranscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitTranscriptionRequest {
    return new SubmitTranscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitTranscriptionRequest {
    return new SubmitTranscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitTranscriptionRequest | PlainMessage<SubmitTranscriptionRequest> | undefined, b: SubmitTranscriptionRequest | PlainMessage<SubmitTranscriptionRequest> | undefined): boolean {
    return proto3.util.equals(SubmitTranscriptionRequest, a, b);
  }
}

