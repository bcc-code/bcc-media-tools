// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/api.proto

package apiv1connect

import (
	v1 "bcc-media-tools/gen/api/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// APIServiceName is the fully-qualified name of the APIService service.
	APIServiceName = "api.v1.APIService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// APIServiceGetPermissionsProcedure is the fully-qualified name of the APIService's GetPermissions
	// RPC.
	APIServiceGetPermissionsProcedure = "/api.v1.APIService/GetPermissions"
	// APIServiceUpdatePermissionsProcedure is the fully-qualified name of the APIService's
	// UpdatePermissions RPC.
	APIServiceUpdatePermissionsProcedure = "/api.v1.APIService/UpdatePermissions"
	// APIServiceDeletePermissionsProcedure is the fully-qualified name of the APIService's
	// DeletePermissions RPC.
	APIServiceDeletePermissionsProcedure = "/api.v1.APIService/DeletePermissions"
	// APIServiceListPermissionsProcedure is the fully-qualified name of the APIService's
	// ListPermissions RPC.
	APIServiceListPermissionsProcedure = "/api.v1.APIService/ListPermissions"
	// APIServiceGetYearsProcedure is the fully-qualified name of the APIService's GetYears RPC.
	APIServiceGetYearsProcedure = "/api.v1.APIService/GetYears"
	// APIServiceGetAlbumsProcedure is the fully-qualified name of the APIService's GetAlbums RPC.
	APIServiceGetAlbumsProcedure = "/api.v1.APIService/GetAlbums"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	aPIServiceServiceDescriptor                 = v1.File_api_v1_api_proto.Services().ByName("APIService")
	aPIServiceGetPermissionsMethodDescriptor    = aPIServiceServiceDescriptor.Methods().ByName("GetPermissions")
	aPIServiceUpdatePermissionsMethodDescriptor = aPIServiceServiceDescriptor.Methods().ByName("UpdatePermissions")
	aPIServiceDeletePermissionsMethodDescriptor = aPIServiceServiceDescriptor.Methods().ByName("DeletePermissions")
	aPIServiceListPermissionsMethodDescriptor   = aPIServiceServiceDescriptor.Methods().ByName("ListPermissions")
	aPIServiceGetYearsMethodDescriptor          = aPIServiceServiceDescriptor.Methods().ByName("GetYears")
	aPIServiceGetAlbumsMethodDescriptor         = aPIServiceServiceDescriptor.Methods().ByName("GetAlbums")
)

// APIServiceClient is a client for the api.v1.APIService service.
type APIServiceClient interface {
	// Permissions
	GetPermissions(context.Context, *connect.Request[v1.Void]) (*connect.Response[v1.Permissions], error)
	UpdatePermissions(context.Context, *connect.Request[v1.SetPermissionsRequest]) (*connect.Response[v1.Void], error)
	DeletePermissions(context.Context, *connect.Request[v1.DeletePermissionsRequest]) (*connect.Response[v1.Void], error)
	ListPermissions(context.Context, *connect.Request[v1.Void]) (*connect.Response[v1.PermissionsList], error)
	// BMM
	GetYears(context.Context, *connect.Request[v1.Void]) (*connect.Response[v1.GetYearsResponse], error)
	GetAlbums(context.Context, *connect.Request[v1.GetAlbumsRequest]) (*connect.Response[v1.AlbumsList], error)
}

// NewAPIServiceClient constructs a client for the api.v1.APIService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAPIServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) APIServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aPIServiceClient{
		getPermissions: connect.NewClient[v1.Void, v1.Permissions](
			httpClient,
			baseURL+APIServiceGetPermissionsProcedure,
			connect.WithSchema(aPIServiceGetPermissionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePermissions: connect.NewClient[v1.SetPermissionsRequest, v1.Void](
			httpClient,
			baseURL+APIServiceUpdatePermissionsProcedure,
			connect.WithSchema(aPIServiceUpdatePermissionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePermissions: connect.NewClient[v1.DeletePermissionsRequest, v1.Void](
			httpClient,
			baseURL+APIServiceDeletePermissionsProcedure,
			connect.WithSchema(aPIServiceDeletePermissionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPermissions: connect.NewClient[v1.Void, v1.PermissionsList](
			httpClient,
			baseURL+APIServiceListPermissionsProcedure,
			connect.WithSchema(aPIServiceListPermissionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getYears: connect.NewClient[v1.Void, v1.GetYearsResponse](
			httpClient,
			baseURL+APIServiceGetYearsProcedure,
			connect.WithSchema(aPIServiceGetYearsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAlbums: connect.NewClient[v1.GetAlbumsRequest, v1.AlbumsList](
			httpClient,
			baseURL+APIServiceGetAlbumsProcedure,
			connect.WithSchema(aPIServiceGetAlbumsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// aPIServiceClient implements APIServiceClient.
type aPIServiceClient struct {
	getPermissions    *connect.Client[v1.Void, v1.Permissions]
	updatePermissions *connect.Client[v1.SetPermissionsRequest, v1.Void]
	deletePermissions *connect.Client[v1.DeletePermissionsRequest, v1.Void]
	listPermissions   *connect.Client[v1.Void, v1.PermissionsList]
	getYears          *connect.Client[v1.Void, v1.GetYearsResponse]
	getAlbums         *connect.Client[v1.GetAlbumsRequest, v1.AlbumsList]
}

// GetPermissions calls api.v1.APIService.GetPermissions.
func (c *aPIServiceClient) GetPermissions(ctx context.Context, req *connect.Request[v1.Void]) (*connect.Response[v1.Permissions], error) {
	return c.getPermissions.CallUnary(ctx, req)
}

// UpdatePermissions calls api.v1.APIService.UpdatePermissions.
func (c *aPIServiceClient) UpdatePermissions(ctx context.Context, req *connect.Request[v1.SetPermissionsRequest]) (*connect.Response[v1.Void], error) {
	return c.updatePermissions.CallUnary(ctx, req)
}

// DeletePermissions calls api.v1.APIService.DeletePermissions.
func (c *aPIServiceClient) DeletePermissions(ctx context.Context, req *connect.Request[v1.DeletePermissionsRequest]) (*connect.Response[v1.Void], error) {
	return c.deletePermissions.CallUnary(ctx, req)
}

// ListPermissions calls api.v1.APIService.ListPermissions.
func (c *aPIServiceClient) ListPermissions(ctx context.Context, req *connect.Request[v1.Void]) (*connect.Response[v1.PermissionsList], error) {
	return c.listPermissions.CallUnary(ctx, req)
}

// GetYears calls api.v1.APIService.GetYears.
func (c *aPIServiceClient) GetYears(ctx context.Context, req *connect.Request[v1.Void]) (*connect.Response[v1.GetYearsResponse], error) {
	return c.getYears.CallUnary(ctx, req)
}

// GetAlbums calls api.v1.APIService.GetAlbums.
func (c *aPIServiceClient) GetAlbums(ctx context.Context, req *connect.Request[v1.GetAlbumsRequest]) (*connect.Response[v1.AlbumsList], error) {
	return c.getAlbums.CallUnary(ctx, req)
}

// APIServiceHandler is an implementation of the api.v1.APIService service.
type APIServiceHandler interface {
	// Permissions
	GetPermissions(context.Context, *connect.Request[v1.Void]) (*connect.Response[v1.Permissions], error)
	UpdatePermissions(context.Context, *connect.Request[v1.SetPermissionsRequest]) (*connect.Response[v1.Void], error)
	DeletePermissions(context.Context, *connect.Request[v1.DeletePermissionsRequest]) (*connect.Response[v1.Void], error)
	ListPermissions(context.Context, *connect.Request[v1.Void]) (*connect.Response[v1.PermissionsList], error)
	// BMM
	GetYears(context.Context, *connect.Request[v1.Void]) (*connect.Response[v1.GetYearsResponse], error)
	GetAlbums(context.Context, *connect.Request[v1.GetAlbumsRequest]) (*connect.Response[v1.AlbumsList], error)
}

// NewAPIServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAPIServiceHandler(svc APIServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aPIServiceGetPermissionsHandler := connect.NewUnaryHandler(
		APIServiceGetPermissionsProcedure,
		svc.GetPermissions,
		connect.WithSchema(aPIServiceGetPermissionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceUpdatePermissionsHandler := connect.NewUnaryHandler(
		APIServiceUpdatePermissionsProcedure,
		svc.UpdatePermissions,
		connect.WithSchema(aPIServiceUpdatePermissionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceDeletePermissionsHandler := connect.NewUnaryHandler(
		APIServiceDeletePermissionsProcedure,
		svc.DeletePermissions,
		connect.WithSchema(aPIServiceDeletePermissionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceListPermissionsHandler := connect.NewUnaryHandler(
		APIServiceListPermissionsProcedure,
		svc.ListPermissions,
		connect.WithSchema(aPIServiceListPermissionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceGetYearsHandler := connect.NewUnaryHandler(
		APIServiceGetYearsProcedure,
		svc.GetYears,
		connect.WithSchema(aPIServiceGetYearsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceGetAlbumsHandler := connect.NewUnaryHandler(
		APIServiceGetAlbumsProcedure,
		svc.GetAlbums,
		connect.WithSchema(aPIServiceGetAlbumsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.APIService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case APIServiceGetPermissionsProcedure:
			aPIServiceGetPermissionsHandler.ServeHTTP(w, r)
		case APIServiceUpdatePermissionsProcedure:
			aPIServiceUpdatePermissionsHandler.ServeHTTP(w, r)
		case APIServiceDeletePermissionsProcedure:
			aPIServiceDeletePermissionsHandler.ServeHTTP(w, r)
		case APIServiceListPermissionsProcedure:
			aPIServiceListPermissionsHandler.ServeHTTP(w, r)
		case APIServiceGetYearsProcedure:
			aPIServiceGetYearsHandler.ServeHTTP(w, r)
		case APIServiceGetAlbumsProcedure:
			aPIServiceGetAlbumsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAPIServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAPIServiceHandler struct{}

func (UnimplementedAPIServiceHandler) GetPermissions(context.Context, *connect.Request[v1.Void]) (*connect.Response[v1.Permissions], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.GetPermissions is not implemented"))
}

func (UnimplementedAPIServiceHandler) UpdatePermissions(context.Context, *connect.Request[v1.SetPermissionsRequest]) (*connect.Response[v1.Void], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.UpdatePermissions is not implemented"))
}

func (UnimplementedAPIServiceHandler) DeletePermissions(context.Context, *connect.Request[v1.DeletePermissionsRequest]) (*connect.Response[v1.Void], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.DeletePermissions is not implemented"))
}

func (UnimplementedAPIServiceHandler) ListPermissions(context.Context, *connect.Request[v1.Void]) (*connect.Response[v1.PermissionsList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.ListPermissions is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetYears(context.Context, *connect.Request[v1.Void]) (*connect.Response[v1.GetYearsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.GetYears is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetAlbums(context.Context, *connect.Request[v1.GetAlbumsRequest]) (*connect.Response[v1.AlbumsList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.GetAlbums is not implemented"))
}
